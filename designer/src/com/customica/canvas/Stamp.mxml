<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="102" height="32"
	horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="stamp"
	initialize="onInitialize()" creationComplete="onCreationComplete()">
	<mx:states>
		<mx:State name="selected">
			<mx:SetProperty target="{deleteHandle}" name="alpha" value="1.0"/>
			<mx:SetProperty target="{rotateHandle}" name="alpha" value="1.0"/>
			<mx:SetProperty target="{resizeHandle}" name="alpha" value="1.0"/>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.core.Application;
			import mx.utils.Base64Encoder;

			public static const HANDLE_WIDTH:int = 11;
			
			private const STATE_SELECTED:String = "selected";
			
			private const MIN_WIDTH_HEIGHT:Number = 5;
			private const STICKY_ANGLES:int = 45;
			private const STICKY_ANGLE_TRESHOLD:int = 2;
		
			private var _stampComponent:DisplayObject;
			private var stampComponentUnscaledWidth:Number;
			private var stampComponentUnscaledHeight:Number;
			
			private var selectionBox:Shape = new Shape();
			
			//////////////////////////////////////////////////////////
			/////////////// INITIALIZATION AND GLOBALS ///////////////
			//////////////////////////////////////////////////////////
			
			private function onInitialize(): void {
				alpha = 0;
				addSelectionBox();
			}
			
			private function addSelectionBox(): void {
				selectionBox.alpha = 0;
				this.rawChildren.addChild(selectionBox);
			}

			private var _hasCreationCompleted:Boolean = false;
			
			private function onCreationComplete(): void {
				_hasCreationCompleted = true;
				if(stampComponent != null) {
					addChild(stampComponent);
					setChildIndex(stampComponent, 0);
					stampComponent.addEventListener(MouseEvent.MOUSE_DOWN, onDragMouseDown);
					updateGeometry();
				}
			}
			
			protected function hasCreationCompleted(): Boolean {
				return _hasCreationCompleted;
			}
			
			public function updateGeometry(): void {
				this.addEventListener(Event.ENTER_FRAME, onEnterFrame);
			}
			
			private function onEnterFrame(event:Event): void {
				if(stampComponent.width == 0 || stampComponent.height == 0 ||
					rotateHandle.width == 0 || rotateHandle.height == 0 ||
					resizeHandle.width == 0 || resizeHandle.height == 0) return;
				updateGeometryNow();
				alpha = 1;
				this.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
			}			
			
			protected function updateGeometryNow(): void {
				stampComponentUnscaledWidth = stampComponent.width / stampComponent.scaleX;
				stampComponentUnscaledHeight = stampComponent.height / stampComponent.scaleY;
				updateLayout();
			}
			
			private function onDelete(): void {
				if(!isSelected()) return;
				parent.removeChild(this);
			}
			
			///////////////////////////////////////////////////
			/////////////// INHERITANCE SUPPORT ///////////////
			///////////////////////////////////////////////////
			
			public function get stampComponent(): DisplayObject {
				return _stampComponent;
			}
			
			public function set stampComponent(stampComponent:DisplayObject): void {
				_stampComponent = stampComponent;
			}
			
			///////////////////////////////////////////////////
			/////////////// GEOMERTY PROPERTIES ///////////////
			///////////////////////////////////////////////////
			
			public function get stampX(): Number {
				return this.x + stampComponent.x - HANDLE_WIDTH;
			}
			
			public function set stampX(x:Number): void {
				this.x = 0;
				stampComponent.x = x + HANDLE_WIDTH;
			}
			
			public function get stampY(): Number {
				return this.y + stampComponent.y - HANDLE_WIDTH;
			}
			
			public function set stampY(y:Number): void {
				this.y = 0;
				stampComponent.y = y + HANDLE_WIDTH;
			}	
			
			public function get stampRotation(): Number {
				return stampComponent.rotation;
			}
			
			public function set stampRotation(rotation:Number): void {
				stampComponent.rotation = rotation;
			}
			
			public function get stampScale(): Number {
				return stampComponent.scaleX;
			}
			
			public function set stampScale(scale:Number): void {
				stampComponent.scaleX = stampComponent.scaleY = scale;
			}
			
			/////////////////////////////////////////////////
			/////////////// SELECTION SUPPORT ///////////////
			/////////////////////////////////////////////////			
			
			public function select(): void {
				if(isSelected()) return;
				currentState = STATE_SELECTED;
				selectionBox.alpha = 1;
				parent.setChildIndex(this, parent.numChildren - 1);
			}
			
			public function deselect(): void {
				if(!isSelected()) return;
				currentState = "";
				selectionBox.alpha = 0;
			}
			
			public function isSelected(): Boolean {
				return currentState == STATE_SELECTED;
			}
			
			/////////////////////////////////////////////////////
			/////////////// DRAG AND DROP SUPPORT ///////////////
			/////////////////////////////////////////////////////
			
			private var initialPosition:Point;
			private var initialMousePosition:Point;
			
			private function onDragMouseDown(event:MouseEvent): void {
				initialPosition = new Point(this.x, this.y);
				initialMousePosition = new Point(event.stageX, event.stageY);
				stampComponent.removeEventListener(MouseEvent.MOUSE_DOWN, onDragMouseDown);
				Application.application.addEventListener(MouseEvent.MOUSE_MOVE, onDragMouseMove);
				Application.application.addEventListener(MouseEvent.MOUSE_UP, onDragMouseUp);
			}
			
			private function onDragMouseMove(event:MouseEvent): void {
				var newPosition:Point = new Point(
					initialPosition.x + event.stageX - initialMousePosition.x,
					initialPosition.y + event.stageY - initialMousePosition.y);
				newPosition.x = Math.max(newPosition.x, 0);
				newPosition.y = Math.max(newPosition.y, 0);
				newPosition.x = Math.min(newPosition.x, parent.width - this.width);
				newPosition.y = Math.min(newPosition.y, parent.height - this.height);
				this.x = newPosition.x;
				this.y = newPosition.y;
			}
			
			private function onDragMouseUp(event:MouseEvent): void {
				Application.application.removeEventListener(MouseEvent.MOUSE_MOVE, onDragMouseMove);
				Application.application.removeEventListener(MouseEvent.MOUSE_UP, onDragMouseUp);
				stampComponent.addEventListener(MouseEvent.MOUSE_DOWN, onDragMouseDown);
			}			
			
			////////////////////////////////////////////////
			/////////////// ROTATION SUPPORT ///////////////
			////////////////////////////////////////////////			
			
			private function onRotationMouseDown(event:MouseEvent): void {
				if(!isSelected()) return;
				Application.application.addEventListener(MouseEvent.MOUSE_MOVE, onRotationMouseMove);
				Application.application.addEventListener(MouseEvent.MOUSE_UP, onRotationMouseUp);
				beginRotation(event);
			}

			private var initialRotation:Number;
			
			private function beginRotation(event:MouseEvent): void {
				initialRotation = stampComponent.rotation;
				initialMousePosition = new Point(event.stageX, event.stageY);				
			}
			
			private function onRotationMouseMove(event:MouseEvent): void {
				var h:Number = Math.sqrt(Math.pow(stampComponent.width, 2) + Math.pow(stampComponent.height, 2)) / 2;
				var centerToCornerAngle:Number = Math.atan2(stampComponent.height, stampComponent.width) * 180 / Math.PI;
				var center:Point = new Point(
					stampComponent.x + Math.cos((stampComponent.rotation + centerToCornerAngle) * Math.PI / 180) * h,
					stampComponent.y + Math.sin((stampComponent.rotation + centerToCornerAngle) * Math.PI / 180) * h);
				var centerGlobal:Point = localToGlobal(center);
				var initialMouseAngle:Number = Math.atan2(initialMousePosition.y - centerGlobal.y, initialMousePosition.x - centerGlobal.x) * 180 / Math.PI;
				var currentMouseAngle:Number = Math.atan2(event.stageY - centerGlobal.y, event.stageX - centerGlobal.x) * 180 / Math.PI;
				stampComponent.rotation = currentMouseAngle - initialMouseAngle + initialRotation;
				if(Math.abs(int(stampComponent.rotation) % STICKY_ANGLES) <= STICKY_ANGLE_TRESHOLD) {
					stampComponent.rotation = int(stampComponent.rotation / STICKY_ANGLES) * STICKY_ANGLES;
				} else if(Math.abs(int(stampComponent.rotation) % STICKY_ANGLES) >= STICKY_ANGLES - STICKY_ANGLE_TRESHOLD) {
					stampComponent.rotation = (int(stampComponent.rotation / STICKY_ANGLES) + (stampComponent.rotation > 0 ? 1 : -1)) * STICKY_ANGLES;
				}
				stampComponent.x = center.x - Math.cos((stampComponent.rotation + centerToCornerAngle) * Math.PI / 180) * h;
				stampComponent.y = center.y - Math.sin((stampComponent.rotation + centerToCornerAngle) * Math.PI / 180) * h;
				if(updateLayout()) beginRotation(event);		
			}
			
			private function onRotationMouseUp(event:MouseEvent): void {
				Application.application.removeEventListener(MouseEvent.MOUSE_MOVE, onRotationMouseMove);
				Application.application.removeEventListener(MouseEvent.MOUSE_UP, onRotationMouseUp);		
			}
			
			//////////////////////////////////////////////
			/////////////// RESIZE SUPPORT ///////////////
			//////////////////////////////////////////////
			
			private function onResizingMouseDown(event:MouseEvent): void {
				if(!isSelected()) return;
				Application.application.addEventListener(MouseEvent.MOUSE_MOVE, onResizingMouseMove);
				Application.application.addEventListener(MouseEvent.MOUSE_UP, onResizingMouseUp);
				beginResize();
			}

			private var initialRectangle:Rectangle;
			private var initialScale:Number;
			
			private function beginResize(): void {
				initialRectangle = getRectangle();
				initialScale = stampComponent.scaleX;
			}

			private function onResizingMouseMove(event:MouseEvent): void {
				var oldRectangle:Rectangle = getRectangle();
				
				stampComponent.scaleX = initialScale * (event.stageX - oldRectangle.x) / initialRectangle.width;
				stampComponent.scaleY = initialScale * (event.stageY - oldRectangle.y) / initialRectangle.height;
				stampComponent.scaleX = stampComponent.scaleY = Math.max(stampComponent.scaleX, stampComponent.scaleY);
				
				applySizeConstraints(stampComponentUnscaledWidth, stampComponentUnscaledHeight);
				
				var newRectangle:Rectangle = getRectangle();
				stampComponent.x += oldRectangle.x - newRectangle.x;
				stampComponent.y += oldRectangle.y - newRectangle.y;
				if(updateLayout()) beginResize();
			}
			
			public function applySizeConstraints(unscaledWidth:Number, unscaledHeight:Number): void {
				var tentativeWidth:Number = unscaledWidth * stampComponent.scaleX;
				var tentativeHeight:Number = unscaledHeight * stampComponent.scaleY;
				
				if(tentativeWidth < MIN_WIDTH_HEIGHT) {
					stampComponent.scaleX = stampComponent.scaleY = MIN_WIDTH_HEIGHT / unscaledWidth;
				}
				if(tentativeHeight < MIN_WIDTH_HEIGHT) {
					stampComponent.scaleX = stampComponent.scaleY = MIN_WIDTH_HEIGHT / unscaledHeight;
				}
				if(getMaxWidth() != -1 && tentativeWidth > getMaxWidth() && tentativeWidth >= MIN_WIDTH_HEIGHT) {
					stampComponent.scaleX = stampComponent.scaleX = getMaxWidth() / unscaledWidth;
				}
				if(getMaxHeight() != -1 && tentativeHeight > getMaxHeight() && tentativeHeight >= MIN_WIDTH_HEIGHT) {
					stampComponent.scaleY = stampComponent.scaleY = getMaxHeight() / unscaledHeight;
				}
			}
			
			protected function getMaxWidth(): int {
				return -1;
			}
			
			protected function getMaxHeight(): int {
				return -1;
			}
			
			private function onResizingMouseUp(event:Event): void {
				Application.application.removeEventListener(MouseEvent.MOUSE_MOVE, onResizingMouseMove);
				Application.application.removeEventListener(MouseEvent.MOUSE_UP, onResizingMouseUp);				
			}			
			
			/////////////////////////////////////////////////
			/////////////// LAYOUT MANAGEMENT ///////////////
			/////////////////////////////////////////////////
			
			private function updateLayout(): Boolean {
				var transformed:Boolean = adjustSizeAndPosition();
				var rectangle:Rectangle = getRectangle();
				this.width = rectangle.width + HANDLE_WIDTH * 2;
				this.height = rectangle.height + HANDLE_WIDTH * 2;
				var position:Point = parent.globalToLocal(rectangle.topLeft);
				stampComponent.x += this.x - position.x + HANDLE_WIDTH;
				stampComponent.y += this.y - position.y + HANDLE_WIDTH;
				this.x = position.x - HANDLE_WIDTH;
				this.y = position.y - HANDLE_WIDTH;
				updateHandlesLayout();
				updateSelectionBox();
				return transformed;
			}
			
			private function adjustSizeAndPosition(): Boolean {
				var transformed:Boolean;
				transformed = adjustSize();
				transformed = adjustPosition() || transformed;
				return transformed;
			}
			
			private function adjustSize(): Boolean {
				var transformed:Boolean = false;
				var rectangle:Rectangle = getRectangle();
				var newRectangle:Rectangle = null;
				if(rectangle.width > parent.width - HANDLE_WIDTH * 2) {
					stampComponent.scaleX = stampComponent.scaleY = stampComponent.scaleX * (parent.width - HANDLE_WIDTH * 2) / rectangle.width;
					newRectangle = getRectangle();
					stampComponent.x += rectangle.x - newRectangle.x;
					stampComponent.y += rectangle.y - newRectangle.y;					
					rectangle = getRectangle();
					transformed = true;
				}
				if(rectangle.height > parent.height - HANDLE_WIDTH * 2) {
					stampComponent.scaleX = stampComponent.scaleY = stampComponent.scaleY * (parent.height - HANDLE_WIDTH * 2) / rectangle.height;
					newRectangle = getRectangle();
					stampComponent.x += rectangle.x - newRectangle.x;
					stampComponent.y += rectangle.y - newRectangle.y;
					rectangle = getRectangle();
					transformed = true;
				}
				return transformed;	
			}
			
			private function adjustPosition(): Boolean {
				var transformed:Boolean = false;
				var rectangle:Rectangle = getRectangle();
				var position:Point = parent.globalToLocal(rectangle.topLeft);
				if(position.x < HANDLE_WIDTH) {
					stampComponent.x += Math.abs(position.x - HANDLE_WIDTH);
					rectangle = getRectangle();
					position = parent.globalToLocal(rectangle.topLeft);
					transformed = true;
				}
				if(position.y < HANDLE_WIDTH) {
					stampComponent.y += Math.abs(position.y - HANDLE_WIDTH);
					rectangle = getRectangle();
					position = parent.globalToLocal(rectangle.topLeft);
					transformed = true;
				}
				if(position.x > parent.width - rectangle.width - HANDLE_WIDTH) {
					stampComponent.x -= position.x - (parent.width - rectangle.width - HANDLE_WIDTH);
					rectangle = getRectangle();
					position = parent.globalToLocal(rectangle.topLeft);
					transformed = true;
				}
				if(position.y > parent.height - rectangle.height - HANDLE_WIDTH) {
					stampComponent.y -= position.y - (parent.height - rectangle.height - HANDLE_WIDTH);
					rectangle = getRectangle();
					position = parent.globalToLocal(rectangle.topLeft);
					transformed = true;
				}				
				return transformed;
			}
			
			private function updateHandlesLayout(): void {
				deleteHandle.x = 0;
				deleteHandle.y = 0;
				rotateHandle.x = this.width - HANDLE_WIDTH;
				rotateHandle.y = 0;
				resizeHandle.x = this.width - HANDLE_WIDTH;
				resizeHandle.y = this.height - HANDLE_WIDTH;
				setChildIndex(resizeHandle, numChildren - 1);
			}
			
			private function updateSelectionBox(): void {
				selectionBox.graphics.clear();
				selectionBox.graphics.lineStyle(1, 0x808080, 1);
				var rectangle:Rectangle = getRectangle();
				selectionBox.graphics.drawRect(HANDLE_WIDTH - 1, HANDLE_WIDTH - 1, rectangle.width + 1, rectangle.height + 1);
				if(stampComponent.rotation % 90 != 0) {
					var stampWidth:Number = stampComponentUnscaledWidth * stampComponent.scaleX;
					var stampHeight:Number = stampComponentUnscaledHeight * stampComponent.scaleY;
					var topRight:Point = rotate(new Point(stampWidth, 0), stampComponent.rotation);
					var bottomRight:Point = rotate(new Point(stampWidth, stampHeight), stampComponent.rotation);
					var bottomLeft:Point = rotate(new Point(0, stampHeight), stampComponent.rotation);
					selectionBox.graphics.lineStyle(1, 0x808080, 0.5);
					selectionBox.graphics.moveTo(stampComponent.x, stampComponent.y);
					selectionBox.graphics.lineTo(stampComponent.x + topRight.x, stampComponent.y + topRight.y);
					selectionBox.graphics.lineTo(stampComponent.x + bottomRight.x, stampComponent.y + bottomRight.y);
					selectionBox.graphics.lineTo(stampComponent.x + bottomLeft.x, stampComponent.y + bottomLeft.y);
					selectionBox.graphics.lineTo(stampComponent.x, stampComponent.y);
				}
			}
			
			protected function getRectangle(): Rectangle {
				var stampWidth:Number = stampComponentUnscaledWidth * stampComponent.scaleX;
				var stampHeight:Number = stampComponentUnscaledHeight * stampComponent.scaleY;
				var vertices:Array = new Array();
				vertices.push(rotate(new Point(-stampWidth / 2, -stampHeight / 2), stampComponent.rotation));
				vertices.push(rotate(new Point(stampWidth / 2, -stampHeight / 2), stampComponent.rotation));
				vertices.push(rotate(new Point(stampWidth / 2, stampHeight / 2), stampComponent.rotation));
				vertices.push(rotate(new Point(-stampWidth / 2, stampHeight / 2), stampComponent.rotation));
				var bottom:Number = 0;
				var right:Number = 0;
				for(var i:Number = 0; i < vertices.length; i++) {
					 var vertex:Point = vertices[i];
					 if(vertex.x > right) right = vertex.x;
					 if(vertex.y > bottom) bottom = vertex.y;
				}
				var stampCenter:Point = rotate(new Point(stampWidth / 2, stampHeight / 2), stampComponent.rotation);
				stampCenter.x += stampComponent.x;
				stampCenter.y += stampComponent.y;
				stampCenter = localToGlobal(stampCenter);
				return new Rectangle(Math.ceil(stampCenter.x - right), Math.ceil(stampCenter.y - bottom), Math.ceil(right * 2), Math.ceil(bottom * 2));
			}
			
			private function rotate(point:Point, angle:Number): Point {
				return new Point(
					point.x * Math.cos(angle * Math.PI / 180) - point.y * Math.sin(angle * Math.PI / 180),
					point.x * Math.sin(angle * Math.PI / 180) + point.y * Math.cos(angle * Math.PI / 180));				
			}
			
		]]>
	</mx:Script>
	<mx:Style source="../styles.css"/>
	<mx:Image x="0" y="0" themeColor="#009DFF" source="@Embed(source='../../../../images/delete-handle.png')" id="deleteHandle" mouseDown="onDelete()" alpha="0.0"/>
	<mx:Image x="93" y="0" themeColor="#009DFF" source="@Embed(source='../../../../images/rotate-handle.png')" id="rotateHandle" mouseDown="onRotationMouseDown(event)" alpha="0.0"/>
	<mx:Image x="93" y="23" source="@Embed(source='../../../../images/resize-handle.png')" id="resizeHandle" mouseDown="onResizingMouseDown(event)" alpha="0.0"/>
</mx:Canvas>
